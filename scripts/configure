#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# Set computer name, hostname.
read -p "Would you like to configure hostname now? (y/n) " -n 1
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    read -p 'computer/hostname: ' computer_name
    sudo scutil --set ComputerName $computer_name
    sudo scutil --set HostName $computer_name
    sudo scutil --set LocalHostName $computer_name
    echo "Computer name is set successfully."
fi

# Configure SSH.
if [ ! -d "$HOME/.ssh" ]; then
    read -p "Would you like to configure SSH now? (y/n) " -n 1
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "SSH Email: " email
        ssh-keygen -t rsa -b 4096 -C $email
        echo "SSH is configured successfully."
    fi
fi

# Generate GPG key.
if [ ! -f "$HOME/.gnupg/trustdb.gpg" ]; then
    read -p "Would you like to generate GPG Key now? (y/n) " -n 1
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        gpg --full-generate-key
        echo "Your GPG key is generated successfully."
    fi
fi

# Create a folder for secrets.
mkdir -p $HOME/.dotsecret

# Configure GIT.
if [ ! -f "$HOME/.dotsecret/.gitconfig" ]; then
    read -p "Would you like to configure GIT now? (y/n) " -n 1
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        read -p "user.name: " username
        read -p "user.email: " useremail

        keylong=$(gpg --list-secret-keys --keyid-format LONG | grep "sec")
        signingKey=${keylong:14:16}
        echo -e "[user]\n    name = $username\n    email = $useremail\n    signingKey = $signingKey" >$HOME/.dotsecret/.gitconfig
        echo "Git is configured successfully."
    fi
fi
